groupy[,list(mean=mean(rank), by=income_group)]
dtmeans <- groupy[,list(mean=mean(rank), by=income_group)]
summary(dtmeans)
ddply(groupy,~income_group, summarise, mean=mean(rank))
na.omit(groupy)
groupy<- na.omit(groupy)
ddply(groupy,~income_group, summarise, mean=mean(rank))
ddply(attempt, attempt$Income.Group, summarise, mean=mean(attempt$Gross.domestic.product.2012))
aggregate(attempt$Gross.domestic.product.2012, by=list(attempt$Income.Group), FUN=mean)
aggregate(attempt$Gross.domestic.product.2012 ~ attempt$Income.Group, data=attempt, FUN=mean(attempt$Gross.domestic.product.2012))
class(attempt$Gross.domestic.product.2012)
aggregate(as.numeric(attempt$Gross.domestic.product.2012) ~ attempt$Income.Group, data=attempt, mean(attempt$Gross.domestic.product.2012))
ddply(attempt, attempt$Income.Group, summarise, mean=mean(as.numeric(attempt$Gross.domestic.product.2012)))
aggregate(as.numeric(attempt$Gross.domestic.product.2012) ~ attempt$Income.Group, data=attempt, summarise, mean=mean(attempt$Gross.domestic.product.2012))
install.packages("psych")
library("psych", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
describeBy(attempt, attempt$Income.Group)
statsBy.boot.summary(attempt, var="Income_Group")
statsBy(attempt, attempt$Income.Group)
library("sqldf", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
sqldf(' select Income.Group, avg(Gross.domestic.product.2012) from attempt group by Income.Group ')
sqldf(' select Income.Group, Gross.domestic.product.2012 from attempt group by Income.Group ')
mean(as.numeric(attempt[,2]))
class(attempt)
attempt<-data.table(attempt)
attempt(,mean(attempt$Gross.domestic.product.2012, by=Income.Group))
attempt[,mean(attempt$Gross.domestic.product.2012, by=Income.Group)]
attempt[,mean(as.numeric(attempt$Gross.domestic.product.2012), by=Income.Group)]
attempt[,"Gross.domestic.product.2012"] = as.integer(as.character(attempt[,"Gross.domestic.product.2012"]))
tapply(x=attempt$Gross.domestic.product.2012, INDEX=attempt$Income.Group,FUN=mean)
aggregate(attempt$Gross.domestic.product.2012, by=list(attempt$Income.Group), FUN=mean)
class(attempt$Gross.domestic.product.2012)
attempt[,"rank"] = as.integer(as.character(attempt$Gross.domestic.product.2012))
class(attempt$rank)
aggregate(attempt$rank, by=list(attempt$Income.Group), FUN=mean)
aggregate(attempt$rank, by=list(attempt$Income.Group), FUN=mean, na.action=na.omit)
ddply(attempt, attempt$Income.Group, summarise, mean=mean(attempt$rank))
describeBy(attempt, attempt$Income.Group)
wicked$Gross.domestic.product.2012
wicked[,"rank"] = as.integer(as.character(wicked$Gross.domestic.product.2012))
wicked$rank
aggregate(wicked$rank, by=list(wicked$Income.Group), FUN=mean, na.action=na.omit)
quantile(wicked$rank, probs=0,0.2,0.4,0.6,0.8)
quartile(wicked$rank, probs=0,0.2,0.4,0.6,0.8)
quantile(wicked$rank <- rnorm(1001)
)
quantile(wicked$rank <- rnorm(330))
describeBy(wicked, wicked$Income.Group)
table(wicked$Income.Group)
ranked <- quantile(wicked$rank <-rnorm(330))
table(ranked, wicked$Income.Group)
droplevels(wicked$Income.Group)
table(wicked$Income.Group)
cleaner<-droplevels(wicked$Income.Group)
table(cleaner, ranked)
length(cleaner)
length(ranked)
ranked
install.packages("Hmisc")
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
wicked$new = cut2(wicked$Gross.domestic.product.2012, ranked)
wicked$new = cut2(wicked$rank, ranked)
wicked$new
table(wicked$Income.Group)
wicked$too = cut2(wicked$Income.Group, ranked)
describeBy(wicked$new, wicked$Income.Group)
table(ranked, wicked$Income.Group)
ranked
test <-quantile(wicked$Income.Group, g=5)
test<- cut2(wicked$rank, g=5)
test
head(wicked$rank, n=3)
wicked[,"rank"]
wicked[,"rank"] = as.integer(as.character(wicked$Gross.domestic.product.2012))
wicked[,"rank"]
test<- cut2(wicked$rank, g=5)
test
table(test)
wicked[,"binned_rank"] = test
five <- subset(wicked, wicked$binned_rank == "[153, 190)", wicked$Income.Group)
class(wicked$binned_rank)
aggregate(wicked$binned_rank, by=list(wicked$Income.Group), FUN=sum, na.action=na.omit)
wicked[,"binned_rank"] = as.integer(as.character(wicked$binned_rank))
aggregate(wicked$binned_rank, by=list(wicked$Income.Group), FUN=sum, na.action=na.omit)
class(wicked$binned_rank)
count(wicked, vars=wicked$binned_rank, wt_var=wicked$Income.Group)
table(wicked$binned_rank)
wicked[,binned_rank]
wicked[,"binned_rank"]
test
droplevels(test)
class(test)
head(test)
divvy <- cut(wicked$rank, 5, labels=FALSE, ordered_result=TRUE)
head(divvy)
table(divvy)
class(divvy)
source('~/mystuff/coursera-getcleandata-R/quiz3_q2.R')
head(jeff)
class(jeff)
jeff
source('~/mystuff/coursera-getcleandata-R/quiz3_q2.R')
class(jeff)
source('~/mystuff/coursera-getcleandata-R/quiz3_q2.R')
quantile(jeff, probs=0.3, 0.8)
quantile(jeff, probs=seq(0.3, 0.8))
source('~/.active-rstudio-document')
quantile(jeff, 0.3,0.8)
quantile(jeff, 0.8)
wicked[,"divvy"] <- cut(wicked$rank, 5, labels=FALSE)
table("rank")
table(wicked$Income.Group)
justtwo <- c(wicked$divvy, wicked$Income.Group)
justtwo
justtwo <-data.frame(justtwo)
head(justtwo)
head(justtwo, n=15)
justtwo[39:45]
justtwo[39:45,]
justtwo<-colnames("num", "group")
colnames(justtwo) <- c("num", "group")
colnames(justtwo) <- ("group")
head(justtwo)
table(justtwo)
na.omit(justtwo)
lightened <- na.omit(justtwo)
table(lightened)
head(wicked$rank)
wicked[,"gross"] <-cut(wicked$Gross.domestic.product.2012, 5, labels=FALSE)
wicked[,"gross"] <-cut(as.numeric(wicked$Gross.domestic.product.2012), 5, labels=FALSE)
sliced <- c(wicked$gross, wicked$Income.Group)
table(sliced)
head(sliced)
sliced <- data.frame(sliced)
head(sliced)
head(sliced, n=12)
stof<- ddply(wicked, wicked$Income.Group, transform, hists=cut(as.numeric(wicked$Gross.domestic.product.2012), 5, labels=FALSE))
stof<- ddply(wicked, wicked$Income.Group, transform, hists=as.numeric(cut(as.character(wicked$Gross.domestic.product.2012), 5, labels=FALSE)))
summary(wicked)
str(wicked)
source('~/.active-rstudio-document')
head(mergedData)
head(edu)
head(gdp)
head(mergedData)
head(wicked)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(wicked)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(wicked)
head(mergedData)
mergedData[,"divvy"] = cut(mergedData$Income.Group, breaks=quantile(mergedData$Ranking))
mergedData[,"divvy"] = cut(as.numeric(mergedData$Income.Group), breaks=quantile(mergedData$Ranking))
mergedData[,"divvy"] = cut(as.numeric(mergedData$Income.Group), breaks=quantile(as.numeric(mergedData$Ranking))
)
mergedData[,"divvy"] = cut(as.numeric(mergedData$Income.Group), breaks=quantile(as.numeric(mergedData$Ranking)), labels=FALSE)
mergedData[,"divvy"] = cut(as.numeric(mergedData$Income.Group), quantile(as.numeric(mergedData$Ranking)), labels=FALSE)
mergedData[,'Ranking']
source('~/.active-rstudio-document')
wicked[,'Ranking']
wicked[,'divvy'] = cut(as.numeric(wicked$Ranking), breaks=quantile(wicked$Ranking))
wicked[,'divvy'] = cut(as.numeric(wicked$Ranking), breaks=quantile(as.numeric(wicked$Ranking))
)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
wicked[,'divvy']
table(wicked[,'divvy'])
table(wicked[,'divvy'], wicked[,'Income.Groups'])
head(wicked)
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
omit.na(wicked)
na.omit(wicked)
complete.cases(wicked)
complete.cases(wicked$Ranking)
complete.cases(wicked$Income.Group)
complete.cases(wicked$divvy)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
wicked[complete.cases(wicked),]
table(wicked[,'divvy'], wicked[,'Income.Group'])
summary(wicked)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
summary(wicked)
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
summary(wicked)
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
summary(wicked)
dim(wicked)
test <- cut2(as.numeric(wicked$Ranking), g=5)
test
table(test)
test <- cut2(as.numeric(wicked$Ranking), g=6)
table(test)
test <- cut2(as.numeric(wicked$Ranking), rnorm(330))
table(test)
head(wicked)
names(wicked)
names(gdp)
names(edu)
class(wicked$US.dollars.)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
intersect(names(gdp), names(edu))
attempt <- arrange(wicked, desc(wicked$Ranking))
head(attempt)
head(attempt, n=14)
head(attempt, n=16)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(attempt$Short.Name, n=16)
head(attempt, n=16)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(attempt, n=16)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(attempt, n=16)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(attempt, n=16)
head(wicked)
head(wicked, n=16)
mergedData = merge(gdp, edu, by=gdp$CountryCode, all=TRUE)
third <- arrange(mergedData, desc(mergedData["Ranking"]))
head(third, n=16)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(fourth, n=16)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
head(wicked)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
wicked
edu
library(plyr)
library(Hmisc)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("gdp.csv")){
file.create("gdp.csv")
}
download.file(url, destfile="gdp.csv", method = "curl")
datedownloaded <-date()
gdp <- read.csv("gdp.csv", skip=3)
url2 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
if(!file.exists("edu.csv")){
file.create("edu.csv")
}
download.file(url2, destfile="edu.csv", method = "curl")
datedownloaded <-date()
edu <- read.csv("edu.csv")
#looks like 234 matched
#intersect(names(gdp), names(edu))
#looks like gdp has the country code in the first column, so left join should be ok (?)
mergedData = merge(gdp, edu, by=gdp$CountryCode, all=TRUE)
wicked <- arrange(join(gdp, edu), CountryCode)
fourth <- arrange(wicked, desc(as.numeric(wicked["Ranking"]))
)
head(wicked)
fourth <- arrange(wicked, desc(as.integer(as.character(wicked["Ranking"]))))
names(fourth)
names(wicked)
dim(wicked)
length(wicked$Ranking)
class(wicked$Ranking)
fourth <- arrange(wicked, desc(as.integer(as.character(wicked$Ranking))))
head(fourth)
head(fourth, n=16)
length(wicked$CountryCode)
intersect(length(gdp$CountryCode), length(edu$CountryCode))
str(gdp)
str(edu)
str(wicked)
short<-omit.na(wicked$CountryCode)
short<-na.omit(wicked$CountryCode)
length(short)
class(short)
length(as.integer(as.character(short)))
str(short)
source('~/mystuff/coursera-getcleandata-R/quiz3_q3.R')
table(wicked[,'divvy'], wicked[,'Income.Group'])
source('~/mystuff/coursera-getcleandata-R/quiz4_q1.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q1.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q1.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q1.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q1.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q1.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
print(gdp$X.4)
print(gdp$X.5)
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
print(gdp$X.4)
print(gdp$X.3)
millions
millions <- gdp$X.3
millions
nocommas <- gsub(",","", millions)
nocommas
class(nocommas)
na.omit(nocommas)
mean(nocommas, trim=0, na.rm=TRUE)
mean(as.integer(nocommas), trim=0, na.rm=TRUE)
asintegers <-as.integer(nocommas)
mean(asintegers, trim=0, na.rm=TRUE)
head(asintegers)
omit.na(asintegers)
na.omit(asintegers)
cleaner <- na.omit(asintegers)
mean(cleaner)
median(cleaner)
class(millions)
millions <- as.character(gdp$X.3)
class(millions)
nocommas <- gsub(",","", millions)
mean(as.integer(nocommas), trim=0, na.rm=TRUE)
source('~/mystuff/coursera-getcleandata-R/quiz4_q2.R')
print(names(gdp))
millions <- as.character(gdp$V5)
class(millions)
nocommas <- gsub(",","", millions)
mean(as.integer(nocommas), trim=0, na.rm=TRUE)
length(nocommas)
nocommas[:190]
nocommas[,:190]
nocommas[,1:190]
nocommas[1:190,]
dim(nocommas)
class(nocommas)
asintegers <-as.integer(nocommas)
length(asintegers)
cleaner<- na.omit(asintegers)
length(cleaner)
length(cleaner)
print(cleaner)
class(cleaner)
tail(millions)
tail(gdp)
cleaner[1,190]
cleaner[190]
dim(cleaner)
dims(cleaner)
class(cleaner)
size(cleaner)
listy <-as.list(cleaner)
listy
listy[1,190]
class(listy)
dims(listy)
dim(listy)
listy[1][1:190]
listy[2][1:190]
listy[[1:190]]
listy[3][1:190]
droplevels(listy)
listy[1:190][1
]
listy[1,190][1]
listy[:190][1]
listy[1:190][1:190]
mean(listy[1:190][1:190])
cleaner[1:190][1:190]
mean(cleaner[1:190][1:190])
names(gdp)
grep("countryNames",gdp)
grep("*United",countryNames), 5
grep("*United",gdp)
grep("*United",countryNames)
grep("^United",gdp)
grep("^United",gdp)
grep("United$",gdp)
head(gdp)
grep("United", gdp$V4)
grep("^United", gdp$V4)
grep("United$", gdp$V4)
source('~/mystuff/coursera-getcleandata-R/quiz4_q4.R')
library(plyr)
library(Hmisc)
wicked <- arrange(join(gdp, edu), CountryCode)
print(head(wicked))
names(mergedData)
names(wicked)
wicked$V1
wicked$V2
wicked$V3
wicked$V4
wicked$V5
wicked$V6
wicked$V7
wicked$V
wicked$8
wicked$V8
names(wicked)
wicked$V9
wicked$V10
wicked$Special.Notes
names(wicked)
grep("fiscal", gdp)
grep("end", gdp)
grep("end", wicked)
grep("fiscal", wicked)
wicked
mergedData
install.packages("quantmod")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
source('~/quiz4_a1.R')
sampleTimes
install.packages("lubridate")
library(lubridate)
lubed <- ymd(sampleTimes)
lubed
year(lubed)
years_collected <- year(lubed)
two_ago <- grep("2012", years_collected)
two_ago
years_collected
two_ago <- grep("2012", years_collected, value=TRUE)
two_ago
length(two_ago)
weekdays <-wday(lubed, label=TRUE)
weekdays
mondane <- grep("Mon", weekdays, value=TRUE)
mondane
length(mondane)
two_indices <- grep("2012", years_collected)
two_indices
mon_indices <- grep("Mon", weekdays)
mon_indices
intersect(two_indices, mon_indices)
both <- intersect(two_indices,mon_indices)
length(both)
source('~/mystuff/coursera-getcleandata-R/quiz4_q4.R')
str(mergedData)
mergedData$Source.of.most.recent.Income.and.expenditure.data
str(mergedData)
grep("6", mergedData$Latest.household.survey, value=TRUE)
grep("monthly", mergedData$Latest.household.survey, value=TRUE)
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
raw.top()
top(raw)
head(taw)
head(raw)
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
head(raw)
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
source('~/.active-rstudio-document')
source('~/mystuff/projects/MusicViz/tmamm/db/musiclearn/read_parse_ipod.R')
source('~/.active-rstudio-document')
head(raw)
getwd()
setwd("~/mystuff/projects/MusicViz/tmamm/db/musiclearn")
type(raw)
class(raw)
raw.aslist()
as.list(raw)
as.data.frame(raw)
listed <- as.list(raw)
as.data.frame(listed)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
list_to_dataframe(listed)
library(plyr)
list_to_dataframe(listed)
plyr.list_to_dataframe(listed)
source('~/.active-rstudio-document')
quickdf(listed)
strsplit(raw, "\t")
as.data.frame(tabbed)
tabbed <- strsplit(raw, "\t")
as.data.frame(tabbed)
listed <- as.list(tabbed)
as.data.frame(listed)
raw(head)
head(raw)
head(tabbed)
data.frame(tabbed)
class(tabbed)
list_to_dataframe(tabbed)
df <- rbind(tabbed)
df(head)
top(df)
head(df)
df[[1]]
names(df)
class(df)
data.frame(df)
df[[1]]
dims(df)
shape(df)
library(plyr)
dims(df)
